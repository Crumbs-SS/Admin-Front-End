{"version":3,"file":"dropdownlist.component.d.ts","sources":["dropdownlist.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, ViewContainerRef, Renderer2, Injector } from '@angular/core';\nimport { IComponentBase } from '@syncfusion/ej2-angular-base';\nimport { DropDownList } from '@syncfusion/ej2-dropdowns';\nexport declare const inputs: string[];\nexport declare const outputs: string[];\nexport declare const twoWays: string[];\n/**\n*The DropDownList component contains a list of predefined values, from which the user can choose a single value.\n*```html\n*<ejs-dropdownlist></ejs-dropdownlist>\n*```\n*/\nexport declare class DropDownListComponent extends DropDownList implements IComponentBase {\n    private ngEle;\n    private srenderer;\n    private viewContainerRef;\n    private injector;\n    formCompContext: any;\n    formContext: any;\n    tagObjects: any;\n    valueChange: any;\n    /**\n     * Accepts the template design and assigns it to the footer container of the popup list.\n     * > For more details about the available template options refer to [`Template`](../../drop-down-list/templates) documentation.\n     * @default null\n     */\n    footerTemplate: any;\n    /**\n     * Accepts the template design and assigns it to the header container of the popup list.\n     * > For more details about the available template options refer to [`Template`](../../drop-down-list/templates) documentation.\n     * @default null\n     */\n    headerTemplate: any;\n    /**\n     * Accepts the template design and assigns it to the selected list item in the input element of the component.\n     * For more details about the available template options refer to\n     * [`Template`](../../drop-down-list/templates) documentation.\n     *\n     * We have built-in `template engine`\n     *which provides options to compile template string into a executable function.\n     *For EX: We have expression evolution as like ES6 expression string literals.\n     *\n     * @default null\n     */\n    valueTemplate: any;\n    /**\n     * Accepts the template design and assigns it to the group headers present in the popup list.\n     * @default null\n\n     */\n    groupTemplate: any;\n    /**\n     * Accepts the template design and assigns it to each list item present in the popup.\n     * We have built-in `template engine`\n     *\n     * which provides options to compile template string into a executable function.\n     *For EX: We have expression evolution as like ES6 expression string literals.\n     *\n     * @default null\n\n     */\n    itemTemplate: any;\n    noRecordsTemplate: any;\n    actionFailureTemplate: any;\n    private skipFromEvent;\n    constructor(ngEle: ElementRef, srenderer: Renderer2, viewContainerRef: ViewContainerRef, injector: Injector);\n    registerOnChange(registerFunction: (_: any) => void): void;\n    registerOnTouched(registerFunction: () => void): void;\n    writeValue(value: any): void;\n    setDisabledState(disabled: boolean): void;\n    ngOnInit(): void;\n    ngAfterViewInit(): void;\n    ngOnDestroy(): void;\n    ngAfterContentChecked(): void;\n    registerEvents: (eventList: string[]) => void;\n    addTwoWay: (propList: string[]) => void;\n}\n"]}